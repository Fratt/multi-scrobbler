diff --git a/node_modules/typescript-json-schema/dist/typescript-json-schema.js b/node_modules/typescript-json-schema/dist/typescript-json-schema.js
index 5b5ecec..d5298d1 100644
--- a/node_modules/typescript-json-schema/dist/typescript-json-schema.js
+++ b/node_modules/typescript-json-schema/dist/typescript-json-schema.js
@@ -55,7 +55,8 @@ var crypto_1 = require("crypto");
 var ts = require("typescript");
 var path_equal_1 = require("path-equal");
 var vm = require("vm");
-var REGEX_FILE_NAME_OR_SPACE = /(\bimport\(".*?"\)|".*?")\.| /g;
+var REGEX_FILE_NAME_OR_SPACE= /((\{.*)?\bimport\(".*?"(,\s?\{\s?(with|assert):\s?\{\s?"resolution-mode":\s?"(import|require)"\s?\}\s?\})?\)|".*?")\.| /g;
+var REGEX_FILE_NAME_OR_SPACE_REMAINING= /;\s?}$/
 var REGEX_TSCONFIG_NAME = /^.*\.json$/;
 var REGEX_TJS_JSDOC = /^-([\w]+)\s+(\S|\S[\s\S]*\S)\s*$/g;
 var REGEX_GROUP_JSDOC = /^[.]?([\w]+)\s+(\S|\S[\s\S]*\S)\s*$/g;
@@ -954,9 +955,10 @@ var JsonSchemaGenerator = (function () {
         if (this.typeNamesById[id]) {
             return this.typeNamesById[id];
         }
-        return this.makeTypeNameUnique(typ, this.tc
-            .typeToString(typ, undefined, ts.TypeFormatFlags.NoTruncation | ts.TypeFormatFlags.UseFullyQualifiedType)
-            .replace(REGEX_FILE_NAME_OR_SPACE, ""));
+        const str = this.tc
+            .typeToString(typ, undefined, ts.TypeFormatFlags.NoTruncation | ts.TypeFormatFlags.UseFullyQualifiedType);
+        const replaced = str.replace(REGEX_FILE_NAME_OR_SPACE, "").replace(REGEX_FILE_NAME_OR_SPACE_REMAINING, "")
+        return this.makeTypeNameUnique(typ, replaced);
     };
     JsonSchemaGenerator.prototype.makeTypeNameUnique = function (typ, baseName) {
         var id = typ.id;
@@ -1022,9 +1024,10 @@ var JsonSchemaGenerator = (function () {
         }
         var fullTypeName = "";
         if (asTypeAliasRef) {
-            var typeName = this.tc
-                .getFullyQualifiedName(reffedType.getFlags() & ts.SymbolFlags.Alias ? this.tc.getAliasedSymbol(reffedType) : reffedType)
-                .replace(REGEX_FILE_NAME_OR_SPACE, "");
+            const str = this.tc
+                .getFullyQualifiedName(reffedType.getFlags() & ts.SymbolFlags.Alias ? this.tc.getAliasedSymbol(reffedType) : reffedType);
+            const replaced = str.replace(REGEX_FILE_NAME_OR_SPACE, "").replace(REGEX_FILE_NAME_OR_SPACE_REMAINING, "");
+            var typeName = replaced;
             if (this.args.uniqueNames && reffedType) {
                 var sourceFile = getSourceFile(reffedType);
                 var relativePath = path.relative(process.cwd(), sourceFile.fileName);
